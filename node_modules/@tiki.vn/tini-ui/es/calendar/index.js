import _extends from "@babel/runtime/helpers/extends";
import { getMonthDetails } from './helper.js';
import { getI18nByLocale } from '../_util/getI18n';
var date = new Date();
var todayTimestamp = date.getTime();
var year = date.getFullYear();
var month = date.getMonth();
var colorMap = ['#808089', '#1A94FF'];
Component({
  data: {
    days: [],
    monthMap: [],
    colorMap: colorMap,
    monthStr: '',
    year: year,
    month: month,
    todayTimestamp: todayTimestamp,
    selectedDate: [],
    monthDetails: []
  },
  props: {
    style: '',
    className: '',
    locale: 'vi',
    tagData: [],
    mode: 'timeOnly',
    // single - range - timeOnly
    header: 'month',
    // year - month
    selectedDate: [],
    iconColor: '#1A94FF',
    disabledPastDays: false,
    showOnlyInMonth: false,
    onSelect: function onSelect() {},
    onChange: function onChange() {}
  },
  methods: {
    _onSelect: function _onSelect(event) {
      var item = event.target.dataset.item;
      var mode = this.props.mode;

      if (mode === 'timeOnly') {
        return;
      }

      if (mode === 'single') {
        this.onSelectSingleDate(item);
        var rs = {
          dates: [this.data.selectedDate[0]]
        };
        this.props.onSelect(rs);
      }

      if (mode === 'range') {
        this.onSelectRangeDate(item);
        var selectedDate = this.data.selectedDate;

        if (selectedDate[0] && selectedDate[1]) {
          var _rs = {
            dates: [].concat(selectedDate)
          };
          this.props.onSelect(_rs);
        }
      }
    },
    onSelectSingleDate: function onSelectSingleDate(item) {
      this.setData({
        selectedDate: [item.timestamp]
      });
    },
    onSelectRangeDate: function onSelectRangeDate(item) {
      var selectedDate = this.data.selectedDate;

      if (!selectedDate[0]) {
        this.setData({
          selectedDate: [item.timestamp]
        });
        return;
      }

      if (!selectedDate[1]) {
        var key = item.timestamp <= this.data.selectedDate[0] ? {
          selectedDate: [item.timestamp, this.data.selectedDate[0]]
        } : {
          selectedDate: [this.data.selectedDate[0], item.timestamp]
        };
        this.setData(_extends({}, key));
        return;
      }

      this.setData({
        selectedDate: [item.timestamp]
      });
    },
    getMonthStr: function getMonthStr(month, monthMap) {
      return monthMap[month] || 'Month';
    },
    setYear: function setYear(event) {
      var offset = event.target.dataset.offset;
      var year = this.data.year + offset;
      var month = this.data.month;
      this.setData({
        year: year,
        monthDetails: getMonthDetails(year, month, this.props.tagData)
      });
      var rs = {
        dates: [].concat(this.data.selectedDate),
        year: year,
        month: month + 1
      };
      this.props.onChange(rs);
    },
    setMonth: function setMonth(event) {
      var offset = event.target.dataset.offset;
      var locale = this.props.locale;
      var i18N = getI18nByLocale(locale);
      var year = this.data.year;
      var month = this.data.month + offset;

      if (month === -1) {
        month = 11;
        year--;
      } else if (month === 12) {
        month = 0;
        year++;
      }

      var monthStr = this.getMonthStr(month, i18N.months);
      this.setData({
        year: year,
        month: month,
        monthDetails: getMonthDetails(year, month, this.props.tagData),
        monthStr: monthStr
      });
      var rs = {
        dates: [].concat(this.data.selectedDate),
        year: year,
        month: month + 1
      };
      this.props.onChange(rs);
    }
  },
  didMount: function didMount() {
    var _this$props = this.props,
        tagData = _this$props.tagData,
        locale = _this$props.locale;
    var _this$data = this.data,
        month = _this$data.month,
        year = _this$data.year;
    var i18N = getI18nByLocale(locale);
    var monthStr = this.getMonthStr(month, i18N.months);
    var keys = {
      days: i18N.days,
      monthMap: i18N.months,
      monthDetails: getMonthDetails(year, month, tagData),
      monthStr: monthStr
    };
    this.setData(_extends({}, keys));
  },
  deriveDataFromProps: function deriveDataFromProps(nextProps) {
    var selectedDate = nextProps.selectedDate,
        tagData = nextProps.tagData,
        locale = nextProps.locale;
    var i18N = getI18nByLocale(locale);

    if (selectedDate[0]) {
      var _date = new Date(selectedDate[0]);

      var _year = _date.getFullYear();

      var _month = _date.getMonth();

      var monthStr = this.getMonthStr(_month, i18N.months);
      this.setData({
        selectedDate: selectedDate,
        year: _year,
        month: _month,
        monthDetails: getMonthDetails(_year, _month, tagData),
        monthStr: monthStr
      });
    }
  }
});